// Solution by: Muhammad Shahroz, Roll Number 153163
//__________________________________________________________________________

1: Undeclared Variables:

int main()
{
    // =>SOLUTION1: Declare x as int value
    int x; //Declare x as int value
    cin>>x;
    cout<<x;
}

"Huh? Why do I get an error?"
"*==ANS: Because x was not declared==*"
//__________________________________________________________________________



2: Uninitialized variables:

// =>SOLUTION2: Initialize count with zero
int count = 0;
while(count<100)
{
cout<<count;
}

"Why doesn't my program enter the while loop?"
"*==ANS: Because 'count' was not initialized==*"
//__________________________________________________________________________




3: Setting a variable to an uninitialized value:

int a, b;

// =>SOLUTION3(a): Initialize 'sum' with zero
int sum = 0;
cout<<"Enter two numbers to add: ";

// =>SOLUTION3(b): Added 'cin>>a' to get first number
cin>>a;
cin>>b;
cout<<"The sum is: "<<sum;
When Run:
Enter two numbers to add: 1 3
The sum is: -1393

"What's wrong with my program?"
"*==ANS: Sum was not initialized with zero==*"
//__________________________________________________________________________





4: Using a single equal sign to check equality:

// =>SOLUTION4: Used double 'equal signs'
char x=='Y';
while(x=='Y')
{
//...
cout<<"Continue? (Y/N)";
cin>>x;
}

"Why doesn't my loop ever end?"
"*==ANS: Because single equal sign was used here before==*"
//__________________________________________________________________________




5: Undeclared Functions:

int main()
{
menu();
}


void menu()
{
    
    // =>SOLUTION5: Function 'menu' is now declared
    int option;
    
    cout<<"\t\tMENU\t\t"
        <<"1.Student"
        <<"4.Faculty"
        <<"3.Applicant"
        <<"5.Exit"
        <<endl;
    
//...
}

"Why do I get an error about menu being unknown?"
"*==ANS: Because 'menu' function was not declared==*"
//__________________________________________________________________________





6: Extra Semicolons:

// =>SOLUTION6: Removed extra semi colons from 'for loop'
for(int x=0; x<100; x++);
cout<<x;

"Why does it output 100?"
"*==ANS: Because loop does not start properly just because of extra semi colons & shows declared value of x==*"
//__________________________________________________________________________





7: Overstepping array boundaries:

int array[10];
//...

// =>SOLUTION7: Changed condition from 'x<=10' to 'x<10' & starts from 'x=0' instead of 'x=1' to fix the overstepping
for(int x=0; x<10; x++)
cout<<array[x];

"Why doesn't it output the correct values?"
"*==ANS: Because condition exceeds from array limit==*"
//__________________________________________________________________________





8: Integer division

For example:
// =>SOLUTION8: Changed the 'half' data type to get float values in result
float half = 1/2;

"This code sets half to 0 not 0.5! Why? Because 1 and 2 are integer constants."
"*==ANS: Because double ignores the values after points==*"
//__________________________________________________________________________





9: Variable Name Styles

Take a look at the below program. Can you see anything wrong?

#include <stdio.h>
#include <string.h>

main()
{
char Cat_Name[20] = "fluffy";
char dog_Name[20] = "fido";
char rat_Name[20] = "fester";
int Cat_age = 3;
int dogs_age = 4;
int rat_age = 1;
char my_Pet[20];
int its_Age;

strcpy(my_Pet,rat_Name);
its_Age = rat_age;
printf("My pet is %s\n",my_Pet);
}

"Besides the obviously bizarre choice of having a pet rat, do you notice anything?"
"*==ANS: Variable names were wrong==*"
//__________________________________________________________________________





10 Misusing the && and || operators:

int value;
do
{
//...
value=10;

// =>SOLUTION10: Changed operator from '||' to '&&'
}while(!(value==10) && !(value==20))

"Huh? Even though value is 10 the program loops. Why?"
"*==ANS: Because '||' operators ignores one condition while '&&' operators includes both==*"
//__________________________________________________________________________